name: gh-secrets-scanner
on:
  push:
    branches: ["main", "master", "*"]

jobs:
  Trufflehog_Secrets_scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read  # allow checkout
      statuses: read  # allow listing status/STATUSES
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate a GH API token
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.SECRET_SCANNER_APP }}
          private-key: ${{ secrets.SS_APP_PRIVATE_KEY }}

      - name: Find BASE_COMMIT (last successful secrets-scan)
        id: base
        shell: bash
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          # Settings

          OWNER="${GITHUB_REPOSITORY%/*}"
          REPO="${GITHUB_REPOSITORY#*/}"
          BRANCH="${GITHUB_REF_NAME}"
          API="https://api.github.com/repos/${OWNER}/${REPO}"

          # Get default branch from repo API (for fallback)

          DEFAULT_BRANCH=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "$API" | jq -r .default_branch)
          git fetch origin $DEFAULT_BRANCH

          # Look at last 100 commits on this branch
          COMMITS=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "$API/commits?sha=${BRANCH}&per_page=100" | jq -r '.[].sha')

          BASE_COMMIT=""
          for SHA in $COMMITS; do
            CHECKS_JSON=$(curl -s -H "Authorization: token $GH_TOKEN" \
                            "$API/commits/$SHA/check-runs")
          
            FOUND=$(echo "$CHECKS_JSON" | jq -r \
              --arg JOB "$GITHUB_JOB" \
              '.check_runs[]
                | select(.name == $JOB and (.conclusion == "success" or .conclusion == "failure"))
                | .head_sha' | head -1)
            if [[ -n "$FOUND" ]]; then
              BASE_COMMIT="$FOUND"
              echo "Found incremental base commit: $BASE_COMMIT"
              break
            fi
          done

          # Fallback: no previous scan found, so scan from branch point with default branch
          if [[ -z "$BASE_COMMIT" ]]; then
            BASE_COMMIT=$(git merge-base HEAD origin/$DEFAULT_BRANCH)
            echo "No previous check found. Falling back to merge-base: $BASE_COMMIT"
          else
            echo "Found previous scan check at $BASE_COMMIT"
          fi

          echo "BASE_COMMIT=$BASE_COMMIT" >> $GITHUB_OUTPUT

      - name: Scan for secrets with Trufflehog
        uses: trufflesecurity/trufflehog@main
        with:
          path: .
          base: ${{ steps.base.outputs.BASE_COMMIT }}


      - name: Send Slack alert if secrets found
        if: ${{ failure() }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL: "test-security-alerts" # change to your Slack channel ID
        run: |
          CI_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"

          BLOCKS=$(jq -n \
            --arg compare "$COMPARE_LINK" \
            --arg author "$AUTHOR" \
            --arg repo "${GITHUB_REPOSITORY#*/}" \
            --arg branch "${GITHUB_REF_NAME}" \
            --arg ci_url "$CI_URL" \
            '[
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "A Secret has been pushed to GitHub :critical-alarm:",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "fields": [
                  { "type": "mrkdwn", "text": "*Flagged Commits:* <\($compare)|Investigate>" },
                  { "type": "mrkdwn", "text": "*Author:* \($author)" },
                  { "type": "mrkdwn", "text": "*Repo:* <https://github.com/ORGANISATION/\($repo)|\($repo)>" },
                  { "type": "mrkdwn", "text": "*Branch:* \($branch)" }
                ]
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "action_id": "basic_fail_view",
                    "text": { "type": "plain_text", "text": "View Secret Info" },
                    "url": "\($ci_url)"
                  }
                ]
              }
            ]'
          )

          curl -X POST "https://slack.com/api/chat.postMessage" \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H 'Content-type: application/json' \
            --data "$(jq -n --arg channel "$SLACK_CHANNEL" --argjson blocks "$BLOCKS" '{channel: $channel, blocks: $blocks}')"
